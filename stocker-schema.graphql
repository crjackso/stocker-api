# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AssetType {
  """
  Common stock represents your residual ownership stake in a business entity
  """
  CommonStock

  """Exchange-traded funds"""
  ETF
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  notIn: [DateTime!]
}

input DividendWhereInput {
  payDate: DateTimeFilter
  tickerSymbol: InsensitiveStringFilter
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

input FloatFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input InsensitiveStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: String! = "insensitive"
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createStock(input: StockCreateInput!): StockType!

  """Performs an upsert of the given stock entry"""
  upsertStock(input: StockUpdateInput!): StockType!
}

type PortfolioType {
  id: Int!
  stocks: [StockType!]
  title: String!
  user: UserType
  userId: Int!
}

type Query {
  getDividend(id: Int!): StockDividendLogType
  getDividends(input: DividendWhereInput!): [StockDividendLogType!]
  getPortfolio(id: Int!): PortfolioType
  getStock(tickerSymbol: String!): StockType
  getStocks(input: StockWhereInput!): [StockType!]!
  getUser(id: Float!): UserType!
  getUsers(input: UserWhereInput!): [UserType!]!
}

enum QueryMode {
  default
  insensitive
}

input StockCreateInput {
  companyName: String!
  fiftyTwoWeekHigh: Float!
  fiftyTwoWeekLow: Float!
  lastPrice: Float!
  tickerSymbol: String!
}

type StockDividendLogType {
  cashAmount: Float!
  exDividendDate: DateTime
  payDate: DateTime!
  stock: StockType
  tickerSymbol: String!
  updatedAt: DateTime!
}

type StockType {
  assetType: AssetType
  companyName: String!
  createdAt: DateTime!
  fiftyTwoWeekHigh: Float
  fiftyTwoWeekLow: Float
  id: Int!
  lastPrice: Float!
  lastPriceAsOfDate: DateTime!
  logoUrl: String
  tickerSymbol: String!
  updatedAt: DateTime!
}

input StockUpdateInput {
  companyName: String
  fiftyTwoWeekHigh: Float
  fiftyTwoWeekLow: Float
  lastPrice: Float
  lastPriceAsOfDate: DateTime!
  tickerSymbol: String!
}

input StockWhereInput {
  AND: [StockWhereInput!]
  NOT: [StockWhereInput!]
  OR: [StockWhereInput!]
  companyName: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  lastPrice: FloatFilter
  tickerSymbol: InsensitiveStringFilter
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

type UserType {
  createdAt: DateTime!
  email: EmailAddress!
  firstName: String!
  id: Int!
  lastName: String!
  password: String!
  updatedAt: DateTime!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  id: IntFilter
  lastName: StringFilter
}